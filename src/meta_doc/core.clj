(ns meta-doc.core
  "Helper function to add examples and generate more info about public vars from given namespace. Used in doc generated by Codox.

  #### Examples

  To add examples to your var call [[add-examples]] macro followed by var name and examples. See [[md5]] for result. To turn on/off generating examples bind [[*load-examples*]] variable to `true`/`false`.

  ```
  (add-examples md5
              (example \"MD5 of a string\" (md5 \"abc\"))
              (example \"MD5 of a another string\" (md5 \"Another string\"))
              (example-image \"Just an example of inserted image (not related to `md5` function).\" \"meta_doc/md5\"))
  ```
  
  There are following types of examples:

  * [[example]] with description and code, returns map with slightly formatted (first `do` is dropped) code as string, description and actual example as function. During doc generation function is called and result is attached to the documentation.
  * [[example-gen-image]] similar as above, three differences are:
      * markdown url for image is added
      * function which operates on Clojure2D `canvas` which does drawing during generation of doc.
      * md5 digest string of parameters is used as image name (jpeg)
  * [[example-image]] just insert pregenerated image with description.

  
  #### Documentation alteration

  Just call [[alter-docs]] in your namespace (or provide ns) to process all examples or additional info. If you want to turn this feature on/off bind [[*alter-docs*]] dynamic variable.
  " 
  (:require [clojure.string :as s])
  (:import [java.security MessageDigest]
           [java.math BigInteger]))

(def ^:dynamic ^{:doc "Do include examples when calling [[alter-docs]]?"} *load-examples* false)
(def ^:dynamic ^{:doc "Do modify `:doc` metadata?"} *alter-docs* false)

(def ^:const ^:private ^String new-line (System/getProperty "line.separator"))
(def ^:const ^:private ^String separator (str new-line new-line))

(def ^:private escape-map {(char 0xffff) "\\0xffff"
                           (char 13) "\\r"
                           (char 10) "\\n"})

(def ^:private ^MessageDigest md5-digest (MessageDigest/getInstance "MD5"))

(defn md5
  "Return `md5` hash for given String `s`. Used to generate unique filename for example."
  [^String s] (format "%032x" (BigInteger. (int 1) (.digest md5-digest (.getBytes s)))))

;; Appenders

(defn- append-to-doc
  "Append string `s` to :doc tag in var `v`."
  [v s]
  (let [doc (:doc (meta v))]
    (alter-meta! v assoc :doc (str doc s))))

(defn- alter-info
  "Append result of function `f` to doc in var `v` and symbol `s` when given `tag` exists in metatags."
  [tag f s v]
  (when-let [tag-val (tag (meta v))]
    (append-to-doc v (f tag-val s v))))

(def ^{:private true :doc "Generate string for `:const` meta. Show value of constant."}
  alter-const-info (partial alter-info :const #(str new-line (s/escape (str "* Constant value `" %2 " = " (var-get %3) "`") escape-map))))
(def ^{:private true :doc "Generate string for `:tag` (type) meta."}
  alter-tag-info (partial alter-info :tag (fn [t & _] (str new-line "* Type: " (if (fn? t) (last (s/split (str (type t)) #"\$")) t)))))

;; Examples

(defn example->string
  "Convert example into string. Strip `do` symbol if exists."
  [xample]
  (if (= 'do (first xample))
    (reduce #(str %1 %2 new-line) "" (rest xample))
    (str xample new-line)))

(defmacro example
  "Create example as a map. Wrap it to the function for later execution (ie. in time of generating docs)."
  [description xample]
  `{:type :regular
    :doc ~description
    :example ~(example->string xample)
    :value-fn (fn [] ~xample)})

(defmacro example-gen-image
  "Create example as image. Produce markdown image url and function which operates on canvas. Unique `digest` should be used as filename for image."
  [description xample]
  (let [canvas (symbol "canvas")
        sx (str xample)
        digest (md5 (str sx description))
        value (str "![" sx "](../images/" digest ".jpg \"" description "\")")]
    `{:type :gen-image
      :doc ~description
      :example ~(example->string xample)
      :value-fn (fn [~canvas] ~xample)
      :digest ~digest
      :value ~value}))

(defmacro example-image
  "Insert image with given filename."
  [description fname]
  (let [value (str "![" fname "](../images/" fname ".jpg \"" description "\")")]
    `{:type :image
      :doc ~description
      :value ~value}))

(defmacro add-examples
  "Add examples as [[example]] or [[example-image]] to the var `v`."
  [v & examples]
  (when (and *load-examples* (seq? examples))
    `(alter-meta! (var ~v) assoc :examples (vec (conj (or [] (:examples (meta (var ~v)))) ~@examples)))))

;; Generate markdown

(defmulti ^:private example-markdown
  "Generate Markdown string for every type of examples." :type)

(defn- example-format [doc s] (str separator "> " doc separator s))

(defmethod ^:private example-markdown :regular [{:keys [doc example value-fn]}]
  (example-format doc (str "```" new-line example " ;; => " (value-fn) new-line "```")))

(defmethod ^:private example-markdown :gen-image [{:keys [doc example value]}]
  (example-format doc (str "```" new-line example"```" separator value)))

(defmethod ^:private example-markdown :image [{:keys [doc value]}]
  (example-format doc value))

(defn- examples-info
  "Process all examples from `:examples` meta tag and convert to the string."
  [examples]
  (reduce #(str %1 (example-markdown %2)) "" examples))

;; 

(defn alter-docs
  "Generate additional documentation for variable from given namespace (`*ns*` as default)."
  ([] (alter-docs *ns*))
  ([ns]
   (when *alter-docs*
     (doseq [[s v] (ns-publics ns)]
       (let [mv (meta v)]
         (when (and *load-examples* (contains? mv :examples))
           (append-to-doc v (str separator "#### Examples" new-line (examples-info (:examples mv))))) 
         (when (some mv [:const :tag])
           (append-to-doc v (str separator "##### Additional info" new-line))
           (alter-const-info s v)
           (alter-tag-info s v)))))))

(add-examples md5
              (example "MD5 of a string" (md5 "abc"))
              (example "MD5 of a another string" (md5 "Another string"))
              (example-image "Just an example of inserted image (not related to `md5` function)." "meta_doc/md5"))

(alter-docs)
